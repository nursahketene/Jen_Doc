From Manage Jenkins 
Managing your jenkins through this tab. 

### Installing and Running ###

# Installing the package
go to jenkins website and install the package that suits your OS

# Running & stoping instaled package
sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist

sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist

# Installing the executable package
go to jenkins website and install the .war file.

#Running & stoping Jenkins
from the terminal go to the direcotry where your jenkins.war file resides and run

java -jar jenkins.war

to stop it ctrl + C 


### Configure System ###
This is where you make your system wide configuration. Many of the plugins that you install will be here to. 

It is the most important party of Jenkins. 

## HOME DIRECTORY is the where your data files and other Jenkins related stuff goes. By default it is in $HIOME/.jenkis/ of course this can be changed.

## SYSTEM MESSAGES has no affect on the system at all but it is rather for distributing information. When you want to give notifications or a system description you can write it here. It also has a nice feature that can take html tags. You can also preview what ever you have added without saving. 

## QUITE PERIOD is useful for those who are using cvs to commit their changes one by one instead of using git alike version control systems that commits changes atomically which means it commits all of the changes at once as single unit. The problem with CVS is that when you commit a file with changes it would be inconsistent if Jenkins would build it right away. it would destabilizes the build before the other changes even had chance to be committed. So the Quite period takes a value that would wait the amount of the value of seconds until it starts a build. 

## USER ACCOUNT MANAGEMENT is also done here. By default Jenkins gives full rights to all users. If you want to restrict some users you should do it ENABLE SECURITY field.

# GLOBAL PROPERTIES

Every change you add to the Global Properties will be available for all build jobs. You can add as many properties as you like.

## ENVIRONMENT VARIABLES 
Here you specify the environment to use for maven build jobs. When invoking these variables you can use $key or ${key}

# JDK

Jenkins as it started historically build for Java build jobs. Therefor it has superb Build in Java support. 
In JDK section you will add a JAVA version to be used to build java applications. By default Jenkins uses whatever JAVA it can find in the system path which Jenkins also runs. However it may be good for development and performance issues to use the latest java version in some cases in the production environment there might be an old version of JAVA.
The easiest way to to supply a JAVA version to Jenkins to build applications with is manually enter them. Like supply 
"name Java 1.6.0"
"JAVA_HOME/usr/java/jdk_1.6.0_17"
name and JAVA_HOME variables can be anything that fits in this case. 
You can have multiple version on JAVA. 
If you haven't manually downloaded JAVA version to your machine you can tick "Install automatically" which Jenkins will download and install the Java version automatically.
NOTE! Jenkins sometimes might not be able to install the JDK. This might occur in case Jenkins does not recognize the OS or can't find the server and so on. 

# Configuring BUild Tools
Jenkins comes with 3 principle build tools. Maven, Ant, and Bash scripting or for windows Batch scripting. You can extend the support for build tools with plugins. 

## MAVEN
MAVEN is a scripting language used to build java applications using standard life cycle and directory structure. 
Jenkins provides good support for Maven and has a good understanding of dependencies and directory structure.
You can install Maven automatically or provide a path to the local Maven installation. You can configure as many versions of Maven as you like.
"name MAVEN 2.2.1"
"MAVEN_HOME/usr/local/maven"
If you want to install automatically check the checkbox. Jenkins will automatically download and install the requested version of Jenkins for you.
Here you can specify to intall the version of the requested Maven from Apache Server or provide a (local) url of your choice.
Sometimes you might need Maven to do some heavy weight jobs. In this case it would be wise to give Maven some extra memory. To do that simply go to "MAVEN PROJECT CONTROLER" and in "Global MAVEN_OPTS" add 
"-Xmx512m"
"-XX:MaxPermSize=128m"



# Reload Configuration from Disk
Jenkins stores all of its system wide and build job configurations  as XML files in home directory. The Jenkins home directory is by default .jenkins/ in HOME path. It also stores all of the build history in the same directory. When you need to archive or migrate old jenkins builds to the new one you need to add and remove those build jobs and put them in Jenkins's builds directory. To get them on the screen you don't need to go offline. You can click "Reload Configuration from the Disk". Jenkins will handle the rest. 

# manage Plugins

You can manage install, update, and remove plugins from here. Note that there are hundreds of plugins and that would help you in many ways. But be careful when removing plugins since it might be affecting your Jenkins stability. 

# System Information

This screen will be showing JAVA system properties and and a system environment variables. You can find here things like the version of Java Jenkins running what user is running under and so forth. You can use this screen as a help for troubleshooting. 

#System Log

This screen will provide the logs for again troubleshooting purposes. One nice feature is that you can subscribe to RSS feeds like ERROR messages or WARNING log messages as a system administrator. 

# Load Statistic
Here you can see the situation with the server in terms of the number of concurrent builds and the length of the build queue. This screen will help you to understand if you need to add extra capacity or extra build notes to your infrastructure. 

# Script console

This is screen is for really expert Jenkins users since it requires a strong knowledge of the internal Jenkins architecture. It is mainly useful for plugin developers and so on. 

# Manage Nodes
Jenkins handles parallel and distributed builds well. You will set how many builds you want to run in parallel and if you are using distributed builds you can set up build notes. Build notes are different machines that Jenkins can use to execute its builds. 

# Prepare for shutdown
If you need to shut down Jenkins while there is a build executed, you can select this option to shutdown Jenkins cleanly. This link will prepare any new job to be started and when all of the builds are finished Jenkins will shutdown gracefully. 


#Installing "ROBOT FRAMEWORK" to Jenkins
To install Robot Framework for Jenkins simply go to manage plugins and tick the checkbox for the plugin and install it. 
FAIL! One problem occured during the automatic installation. The problem is that Jenkins is timing out without being able to connect ERROR: Operation timed out at java.net.ConnectException
Fix! Manual installation. Download the jenkins plugin to jenkins/plugins directory
Obstacle! Succes running Robot Framework with teste cases but, We were unsuccessful to deliberately fail the tests. For some reason Jenkins always passes them.
NOTE! Publishing Robot output "Log/Report Link" should be only the file name without the PATH. Otherwise it can find the page but it won't complain either. 


### Different Build Jobs ###

# Freestyle software project
If you want to have flexibility choosing this option is wise. It is a general purpose build job.

# Maven Project
If you have a maven project it would be wise to use Maven Bild Job. Mavan will understand the pom files and the project structure. Jenkins will understand Maven pom files.

# Monitor and External Job                                                                                                                                                                        
Monitoring external jobs that usually run on as a scheduled job in Unix env. example cron

# Multiconfiguration Jobs
This is when you want to run the same project in many different configurations. Its also called "matrix project"

### TomCat & Jenkins ###

It is pretty straight forward to use Jenkins on TomCat

First
Download TomCat version 5 or later from http://tomcat.apache.org/download-55.cgi

After the download extract the tar.gz file and go to PATH_TO/apache-tomcat-<version_number>/webapps/ in your terminal or file browser and delete everthing inside it.
The files inside are TomCats web front end files so it has no effect on your TomCat

Second 
Download jenkins.war file from http://mirrors.jenkins-ci.org/war/latest/jenkins.war and rename it to ROOT.war and place it under PATH_TO/apache-tomcat-<version_number>/webapps/

Third
Go to your PATH_TO/apache-tomcat-<version_number>/bin/ in Terminal and run

$export CATALINA_OPTS="-DJENKINS_HOME=/path/to/jenkins_home/ -Xmx512m" ##Don't forget to change path to and jenkins_home accordingly. by default jenkins_home is ~/.jenkins
$./catalina.sh start

This will start TomCats serverlet container.
It will create ROOT folder and other things in webapps folder.
You will see something like below. Don't worry that means everything works.

Using CATALINA_BASE:   HOME_PATH/Downloads/apache-tomcat-5.5.35
Using CATALINA_HOME:   HOME_PATH/Downloads/apache-tomcat-5.5.35
Using CATALINA_TMPDIR: HOME_PATH/Downloads/apache-tomcat-5.5.35/temp
Using JRE_HOME:        /System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home
Using CLASSPATH:       HOME_PATH/Downloads/apache-tomcat-5.5.35/bin/bootstrap.jar

When you are done you can stop catelina changing "start" to "stop"

fifth
Starting your TomCat to lunch Jenkins
$./startup.sh 

Now in your browser type the following address http://localhost:8080/

And you are done.

